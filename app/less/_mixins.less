@import 'lesshat-prefixed';
@import '_variables';

.font-size( @font-size: @base-type-size, @offset: 1 ) {
	@rem: ( @font-size / 10 );
	font-size : ~"@{rem}rem";
	font-size : unit( @font-size, px );
	line-height+: @base-line-multiplier / @font-size * @offset;
}

._inject( @content: "" ) {
	content: @content;
	// display: inline-block;
}


//////////////////////////// Helper Class
.ico_base {
	color: @base-icon-color;
	position: relative;
	font-style: normal;
	font-weight: normal;
	font-family+: @font-icon;
	speak: none;
	display: inline-block;
	vertical-align: middle;
	min-width: 40px;
	text-rendering: optimizeLegibility;
	-webkit-font-smoothing: antialiased;
					font-smoothing: antialiased;
	.font-size(@base-icon-size, 2 );
}

.ico {
	&:extend( .ico_base );
}

//////////////////////////// Let's go ahead and set the base icon styles
._ico( @_ico, @font-size: @base-icon-size, @fnt: @font-icon ) {
	._inject( @_ico );
}

//////////////////////////// Let's make some icons
// 	Here's where the magic happens
.icon( @place, @_ico, @fs: @base-icon-size, @fnt: @font-icon ) when ( @place = "pre" ) {
	&:before {
		margin-right: 10px;
		._ico( @_ico, @fs, @fnt );
		&:extend(.ico_base);
	}
}

.icon( @place, @_ico, @fs: @base-icon-size, @fnt: @font-icon ) when ( @place = "app" ) {
	&:after {
		margin-left: @base-margin-half;
		._ico( @_ico, @fs, @fnt );
		&:extend(.ico_base);
	}
}

// @note: these all do nothing but switch the direction.
// @note: offset is based on border @width sent by .arrow()
.arrow_pointing( up, @-color, @offset ) {
	margin-bottom: @offset / 2;
	border-color: transparent transparent @-color transparent;
}

.arrow_pointing( down, @-color, @offset ) {
	margin-top: @offset / 2;
	border-color: @-color transparent transparent transparent;
}

.arrow_pointing( left, @-color, @offset ) {
	margin-right: @offset / 2;
	border-color: transparent transparent transparent @-color;
}

.arrow_pointing( right, @-color, @offset ) {
	margin-left: @offset / 2;
	border-color: transparent @-color transparent transparent;
}

.arrow( @_, @-color: @border-color, @width: 5px ) {
	&:after {
		position: relative;
		border: @width solid;
		._inject();
		.arrow_pointing( @_, @-color, @width );
	}
}

// Border helpers
.border ( @width: 1px, @style: solid, @color ) {
	border: @arguments;
}

.bt ( @width: 1px, @style: solid, @color: @border-color ) {
	border-top: @arguments
}

.br ( @width: 1px, @style: solid, @color: @border-color ) {
	border-right: @arguments
}

.bb ( @width: 1px, @style: solid, @color: @border-color ) {
	border-bottom: @arguments
}

.bl ( @width: 1px, @style: solid, @color: @border-color ) {
	border-left: @arguments
}

// .gradient( @deg, @start: #EEE, @start-percent: 0%, @stop: #FFF, @stop-percent: 100% ) {
// 	background-color: @start;
// 	background-image: -webkit-linear-gradient( @deg, @start @start-percent, @stop @stop-percent );
// 	background-image: 		  	linear-gradient( @deg, @start @start-percent, @stop @stop-percent );
// 	}

// transforms
.transform(...) {
	-webkit-transform: @arguments;
		-ms-transform: @arguments;
			transform: @arguments;
}

.transform-origin(...) {
	-webkit-transform-origin: @arguments;
  	 -moz-transform-origin: @arguments;
			-ms-transform-origin: @arguments;
					transform-origin: @arguments;
}

	.rotate( @deg: 5deg, @origin: center ) {
		.transform( rotate( @deg ) );
		.transform-origin( @origin );
	}

	.scale( @r1: 1, @r2: 1, @origin: center ) {
		.transform( scale( @r1, @r2 ) );
		.transform-origin( @origin );
	}

	.translate( @x:0, @y:0, @origin: center ) {
		.transform( translate( @x, @y ) );
		.transform-origin( @origin );
	}

	.translate3d( @x:0, @y:0, @origin: center ) {
		.transform( translate3d( @x, @y ) );
		.transform-origin( @origin );
	}